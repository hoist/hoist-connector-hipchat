{"version":3,"sources":["connector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;mCAGK,wBAAwB;;8BACT,iBAAiB;;;;sBAClB,QAAQ;;;;sBAItB,QAAQ;;2BACM,eAAe;;;;sBACf,QAAQ;;;;AAC3B,IAAI,SAAS,GAAG,EAEf,CAAC;AACF,IAAI,UAAU,+BAA+B,CAAC;;;;;;IAKzB,OAAO;YAAP,OAAO;;;;;;;AAMf,WANQ,OAAO,CAMd,aAAa,EAAE;0BANR,OAAO;;AAOxB,+BAPiB,OAAO,6CAOlB,mBAAM,EAAE,EAAE,aAAa,EAAE,SAAS,CAAC,EAAE;AAC3C,QAAI,CAAC,cAAc,GAAG,aAAa,CAAC;AACpC,QAAI,CAAC,OAAO,GAAG,yBAAO,KAAK,CAAC;AAC1B,SAAG,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;KAC3B,CAAC,CAAC;GACJ;;;;;;eAZkB,OAAO;;WAiBb,uBAAC,aAAa,EAAE;AAC3B,UAAI,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAChD,UAAI,CAAC,QAAQ,EAAE;;AAEb,YAAI,aAAa,GAAG;AAClB,uBAAa,EAAE,IAAI,CAAC,cAAc,CAAC,WAAW;AAC9C,eAAK,EAAE,WAAW,GAAG,aAAa,CAAC,GAAG;AACtC,gBAAM,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI;AAChC,kBAAQ,EAAE;AACR,kBAAM,EAAE,IAAI,CAAC,cAAc,CAAC,UAAU;AACtC,iBAAK,EAAE,IAAI,CAAC,cAAc,CAAC,SAAS;WACrC;AACD,iBAAO,EAAE;AACP,kBAAM,eAAa,oBAAO,GAAG,CAAC,uBAAuB,CAAC,cAAS,aAAa,CAAC,GAAG,AAAE;WACnF;AACD,wBAAc,EAAE;AACd,gCAAoB,EAAE;AACpB,sBAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;AAC/C,wBAAU,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI;aACrC;AACD,yBAAa,EAAE;AACb,2BAAa,EAAE,IAAI;AACnB,yBAAW,EAAE,IAAI;AACjB,2BAAa,eAAa,oBAAO,GAAG,CAAC,uBAAuB,CAAC,mBAAc,aAAa,CAAC,GAAG,AAAE;AAC9F,4BAAc,eAAa,oBAAO,GAAG,CAAC,uBAAuB,CAAC,YAAS;aACxE;AACD,qBAAS,EAAE,CAAC;AACV,oBAAM,OAAK,IAAI,CAAC,cAAc,CAAC,WAAW,AAAE;AAC5C,uBAAS,OAAK,IAAI,CAAC,cAAc,CAAC,cAAc,AAAE;AAClD,qBAAO,EAAE,cAAc;AACvB,mBAAK,eAAa,oBAAO,GAAG,CAAC,wBAAwB,CAAC,mBAAc,aAAa,CAAC,GAAG,AAAE;aACxF,CAAC;WACH;SACF,CAAC;AACF,YAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AAChB,uBAAa,EAAb,aAAa;SACd,CAAC,CAAC;AACH,eAAO,aAAa,CAAC,QAAQ,8EAA4E,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAG,CAAA;OACzK,MAAM;AACL,eAAO,aAAa,CAAC,IAAI,EAAE,CAAC;OAC7B;KACF;;;WACQ,mBAAC,aAAa,EAAE;AACvB,UAAI,CAAC,cAAc,GAAG,aAAa,CAAC;AACpC,UAAI,CAAC,gBAAgB,CAAC;AACpB,gBAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC;AACvC,oBAAY,EAAE,aAAa,CAAC,GAAG,CAAC,cAAc,CAAC;AAC/C,gBAAQ,4BAA4B;OACrC,CAAC,CAAC;AACH,iCAlEiB,OAAO,2CAkER,aAAa,EAAE;KAChC;;;WACQ,mBAAC,aAAa,EAAE;AACvB,aAAO,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,GAAG,cAAc,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;KACvG;;;WACE,aAAC,IAAI,EAAE;AACR,UAAI,GAAG,QAAM,UAAU,GAAG,IAAI,AAAE,CAAC;AACjC,aAAO,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AACvD,eAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;OAC9B,CAAC,CAAC;KACJ;;;WACG,cAAC,IAAI,EAAE,IAAI,EAAE;AACf,UAAI,GAAG,QAAM,UAAU,GAAG,IAAI,AAAE,CAAC;AACjC,aAAO,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AAC9D,YAAI,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AAC/C,iBAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9B;OACF,CAAC,CAAC;KACJ;;;WACI,eAAC,IAAI,EAAE,IAAI,EAAE;AAChB,UAAI,GAAG,QAAM,UAAU,GAAG,IAAI,AAAE,CAAC;AACjC,aAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AAC/D,eAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;OAC9B,CAAC,CAAC;KACJ;;;WACK,iBAAC,IAAI,EAAE;AACX,UAAI,GAAG,QAAM,UAAU,GAAG,IAAI,AAAE,CAAC;AACjC,aAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC5C;;;WACc,2BAAU;;;wCAAN,IAAI;AAAJ,YAAI;;;AACrB,UAAI,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACrD,aAAO,OAAO,CAAC,OAAO,EAAE,CACrB,IAAI,CAAC,YAAM;AACV,YAAI,0BAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;AAC/B,iBAAO,MAAK,mBAAmB,CAAC,MAAK,cAAc,CAAC,CAAC;SACtD;OACF,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,0CAvGa,OAAO,oDAuGY,IAAI,EAAE;OACvC,CAAC,CAAC;KAEN;;;WACkB,6BAAC,aAAa,EAAE;;;AACjC,aAAO,iCAAQ;AACX,cAAM,EAAE,KAAK;AACb,WAAG,EAAK,UAAU,kBAAe;AACjC,YAAI,EAAE,IAAI;OACX,CAAC,CACD,IAAI,CAAC,UAAC,QAAQ,EAAK;;AAElB,eAAO,iCAAQ;AACb,gBAAM,EAAE,MAAM;AACd,aAAG,EAAE,QAAQ,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ;AAClD,cAAI,EAAE;AACJ,oBAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC;AACvC,oBAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,cAAc,CAAC;WAC5C;AACD,cAAI,EAAE;AACJ,sBAAU,EAAE,oBAAoB;AAChC,iBAAK,EAAE,OAAK,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;WAC7C;AACD,cAAI,EAAE,IAAI;SACX,CAAC,CAAC;OACJ,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AACpB,eAAO,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,cAAc,CAAC,CAAC,CAC9D,IAAI,CAAC,YAAM;AACV,iBAAO,aAAa,CAAC,GAAG,CAAC,WAAW,EAAE,0BAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;SACvG,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,iBAAO,aAAa,CAAC,kBAAkB,CAAC,WAAW,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;SAC9E,CAAC,CAAC;OACN,CAAC,CAAC;KACN;;;WACQ,mBAAC,aAAa,EAAE;;;AACvB,UAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AAChB,eAAO,EAAE,aAAa,CAAC,OAAO;AAC9B,qBAAa,EAAE,IAAI,CAAC,cAAc;OACnC,EAAE,WAAW,CAAC,CAAC;AAChB,aAAO,aAAa,CAAC,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAChE,IAAI,CAAC,YAAM;AACV,eAAO,aAAa,CAAC,GAAG,CAAC,cAAc,EAAE,aAAa,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;OAC7E,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,eAAO,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;OACpE,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,eAAO,aAAa,CAAC,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;OACpF,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,eAAO,OAAK,mBAAmB,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,YAAM;AACxD,iBAAO,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;SACvD,CAAC,CAAC;OACJ,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,eAAO,aAAa,CAAC,IAAI,EAAE,CAAC;OAC7B,CAAC,CAAC;KACN;;;SA5JkB,OAAO;;;qBAAP,OAAO","file":"connector.js","sourcesContent":["import {\n  OAuth2ConnectorBase\n}\nfrom '@hoist/oauth-connector';\nimport request from 'request-promise';\nimport moment from 'moment';\nimport {\n  merge\n}\nfrom 'lodash';\nimport logger from '@hoist/logger';\nimport config from 'config';\nlet overrides = {\n\n};\nlet apiBaseUri = `https://api.hipchat.com/v2`;\n/**\n * A Hoist Connector for connecting to GitHub\n * @extends {OAuthConnectorBase}\n */\nexport default class HipChat extends OAuth2ConnectorBase {\n\n  /**\n   * create a new connector\n   * @param {object} configuration - the configuration properties to use\n   */\n  constructor(configuration) {\n    super(merge({}, configuration, overrides));\n    this._configuration = configuration;\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n\n  /**\n   * @override\n   */\n  receiveBounce(authorization) {\n    var authStep = authorization.get('currentStep');\n    if (!authStep) {\n      //no authorization has been done yet so lets get the authorization url and redirect the user there\n      let configuration = {\n        \"description\": this._configuration.description,\n        \"key\": \"io.hoist.\" + authorization.key,\n        \"name\": this._configuration.name,\n        \"vendor\": {\n          \"name\": this._configuration.vendorName,\n          \"url\": this._configuration.vendorUrl\n        },\n        \"links\": {\n          \"self\": `https://${config.get('Hoist.domains.bouncer')}/info/${authorization.key}`\n        },\n        \"capabilities\": {\n          \"hipchatApiConsumer\": {\n            \"scopes\": this._configuration.scopes.split(','),\n            \"fromName\": this._configuration.name\n          },\n          \"installable\": {\n            \"allowGlobal\": true,\n            \"allowRoom\": true,\n            \"callbackUrl\": `https://${config.get('Hoist.domains.bouncer')}/configure/${authorization.key}`,\n            \"installedUrl\": `https://${config.get('Hoist.domains.bouncer')}/bounce`\n          },\n          \"webhook\": [{\n            \"name\": `${this._configuration.webhookName}`,\n            \"pattern\": `${this._configuration.webhookPattern}`,\n            \"event\": \"room_message\",\n            \"url\": `https://${config.get('Hoist.domains.endpoint')}/connector/${authorization.key}`\n          }]\n        }\n      };\n      this._logger.info({\n        configuration\n      });\n      return authorization.redirect(`https://www.hipchat.com/addons/install?url=data:application/json;base64,${new Buffer(JSON.stringify(configuration)).toString('base64')}`)\n    } else {\n      return authorization.done();\n    }\n  }\n  authorize(authorization) {\n    this._authorization = authorization;\n    this._configureClient({\n      clientId: authorization.get('clientId'),\n      clientSecret: authorization.get('clientSecret'),\n      baseSite: `https://www.hipchat.com/`\n    });\n    super.authorize(authorization);\n  }\n  intercept(authorization) {\n    return authorization.raise(this._configuration._connectorKey + ':new:message', authorization.payload);\n  }\n  get(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('GET', uri).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  post(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('POST', uri, body).then((result) => {\n      if (result && result[0] && result[0].length > 0) {\n        return JSON.parse(result[0]);\n      }\n    });\n  }\n  patch(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('PATCH', uri, body).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  delete(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('DELETE', uri);\n  }\n  _performRequest(...args) {\n    let expiresAt = this._authorization.get('ExpiresAt');\n    return Promise.resolve()\n      .then(() => {\n        if (moment().isAfter(expiresAt)) {\n          return this._refreshAccessToken(this._authorization);\n        }\n      }).then(() => {\n        return super._performRequest(...args);\n      });\n\n  }\n  _refreshAccessToken(authorization) {\n    return request({\n        method: 'GET',\n        url: `${apiBaseUri}/capabilities`,\n        json: true\n      })\n      .then((response) => {\n\n        return request({\n          method: 'POST',\n          url: response.capabilities.oauth2Provider.tokenUrl,\n          auth: {\n            username: authorization.get('clientId'),\n            password: authorization.get('clientSecret')\n          },\n          body: {\n            grant_type: 'client_credentials',\n            scope: this._configuration.scopes.split(',')\n          },\n          json: true\n        });\n      }).then((response) => {\n        return authorization.set('AccessToken', response['access_token'])\n          .then(() => {\n            return authorization.set('ExpiresAt', moment().utc().add(response['expires_in'], 'seconds').toDate());\n          }).then(() => {\n            return authorization.setDisplayProperty('GroupName', response['group_name']);\n          });\n      });\n  }\n  configure(authorization) {\n    this._logger.info({\n      payload: authorization.payload,\n      configuration: this._configuration\n    }, 'configure');\n    return authorization.set('clientId', authorization.payload.oauthId)\n      .then(() => {\n        return authorization.set('clientSecret', authorization.payload.oauthSecret);\n      }).then(() => {\n        return authorization.set('groupId', authorization.payload.groupId);\n      }).then(() => {\n        return authorization.set('CapabilitiesUrl', authorization.payload.capabilitiesUrl);\n      }).then(() => {\n        return this._refreshAccessToken(authorization).then(() => {\n          return authorization.set('currentStep', 'configured');\n        });\n      }).then(() => {\n        return authorization.done();\n      });\n  }\n}\n"],"sourceRoot":"/source/"}