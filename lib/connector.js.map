{"version":3,"sources":["connector.js"],"names":[],"mappings":"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","file":"connector.js","sourcesContent":["import {\n  OAuth2ConnectorBase\n}\nfrom '@hoist/oauth-connector';\nimport request from 'request-promise';\nimport moment from 'moment';\nimport {\n  merge\n}\nfrom 'lodash';\nimport logger from '@hoist/logger';\nimport config from 'config';\nlet overrides = {\n\n};\nlet apiBaseUri = `https://api.hipchat.com/v2`;\n/**\n * A Hoist Connector for connecting to GitHub\n * @extends {OAuthConnectorBase}\n */\nexport default class HipChat extends OAuth2ConnectorBase {\n\n  /**\n   * create a new connector\n   * @param {object} configuration - the configuration properties to use\n   */\n  constructor(configuration) {\n    super(merge({}, configuration, overrides));\n    this._configuration = configuration;\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n\n  /**\n   * @override\n   */\n  receiveBounce(authorization) {\n    var authStep = authorization.get('currentStep');\n    if (!authStep) {\n      //no authorization has been done yet so lets get the authorization url and redirect the user there\n      let configuration = {\n        \"description\": this._configuration.description,\n        \"key\": \"io.hoist.\" + authorization.key,\n        \"name\": this._configuration.name,\n        \"vendor\": {\n          \"name\": this._configuration.vendorName,\n          \"url\": this._configuration.vendorUrl\n        },\n        \"links\": {\n          \"self\": `https://${config.get('Hoist.domains.bouncer')}/info/${authorization.key}`\n        },\n        \"capabilities\": {\n          \"hipchatApiConsumer\": {\n            \"scopes\": this._configuration.scopes.split(','),\n            \"fromName\": this._configuration.name\n          },\n          \"installable\": {\n            \"allowGlobal\": true,\n            \"allowRoom\": true,\n            \"callbackUrl\": `https://${config.get('Hoist.domains.bouncer')}/configure/${authorization.key}`,\n            \"installedUrl\": `https://${config.get('Hoist.domains.bouncer')}/bounce`\n          },\n          \"webhook\": [{\n            \"name\": `${this._configuration.webhookName}`,\n            \"pattern\": `${this._configuration.webhookPattern}`,\n            \"event\": \"room_message\",\n            \"url\": `https://${config.get('Hoist.domains.endpoint')}/connector/${authorization.key}`\n          }]\n        }\n      };\n      this._logger.info({\n        configuration\n      });\n      return authorization.redirect(`https://www.hipchat.com/addons/install?url=data:application/json;base64,${new Buffer(JSON.stringify(configuration)).toString('base64')}`)\n    } else {\n      return authorization.done();\n    }\n  }\n  authorize(authorization) {\n    this._authorization = authorization;\n    this._configureClient({\n      clientId: authorization.get('clientId'),\n      clientSecret: authorization.get('clientSecret'),\n      baseSite: `https://www.hipchat.com/`\n    });\n    super.authorize(authorization);\n  }\n  intercept(authorization) {\n    return authorization.raise(this._configuration._connectorKey + ':new:message', authorization.payload);\n  }\n  get(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('GET', uri).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  post(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('POST', uri, body).then((result) => {\n      if (result && result.length > 0) {\n        return JSON.parse(result);\n      }\n    });\n  }\n  patch(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('PATCH', uri, body).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  delete(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('DELETE', uri);\n  }\n  _performRequest(...args) {\n    let expiresAt = this._authorization.get('ExpiresAt');\n    return Promise.resolve()\n      .then(() => {\n        if (moment().isAfter(expiresAt)) {\n          return this._refreshAccessToken(this._authorization);\n        }\n      }).then(() => {\n        return super._performRequest(...args);\n      });\n\n  }\n  _refreshAccessToken(authorization) {\n    return request({\n        method: 'GET',\n        url: `${apiBaseUri}/capabilities`,\n        json: true\n      })\n      .then((response) => {\n\n        return request({\n          method: 'POST',\n          url: response.capabilities.oauth2Provider.tokenUrl,\n          auth: {\n            username: authorization.get('clientId'),\n            password: authorization.get('clientSecret')\n          },\n          body: {\n            grant_type: 'client_credentials',\n            scope: this._configuration.scopes.split(',')\n          },\n          json: true\n        });\n      }).then((response) => {\n        return authorization.set('AccessToken', response['access_token'])\n          .then(() => {\n            return authorization.set('ExpiresAt', moment().utc().add(response['expires_in'], 'seconds').toDate());\n          }).then(() => {\n            return authorization.setDisplayProperty('GroupName', response['group_name']);\n          });\n      });\n  }\n  configure(authorization) {\n    this._logger.info({\n      payload: authorization.payload,\n      configuration: this._configuration\n    }, 'configure');\n    return authorization.set('clientId', authorization.payload.oauthId)\n      .then(() => {\n        return authorization.set('clientSecret', authorization.payload.oauthSecret);\n      }).then(() => {\n        return authorization.set('groupId', authorization.payload.groupId);\n      }).then(() => {\n        return authorization.set('CapabilitiesUrl', authorization.payload.capabilitiesUrl);\n      }).then(() => {\n        return this._refreshAccessToken(authorization).then(() => {\n          return authorization.set('currentStep', 'configured');\n        });\n      }).then(() => {\n        return authorization.done();\n      });\n  }\n}\n"],"sourceRoot":"/source/"}